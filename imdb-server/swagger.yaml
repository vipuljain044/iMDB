openapi: 3.0.0
info:
  title: IMDB Application APIs
  description: IMDB Application APIs
  version: 1.0.0

servers:
  - url: http://localhost:4000
    description: Local development server
  - url: https://app-imdb-api.herokuapp.com
    description: Hosted test server

paths:
  /accounts/register:
    post:
      summary: Register/Signup a new user
      description: API to register users
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                  example: "Vipul Jain"
                email:
                  type: string
                  example: "vipuljain044@gmai.com"
                password:
                  type: string
                  example: "pass123"
              required:
                - fullName
                - password
                - email
      responses:
        "200":
          description: User Registered Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Registration successful"
        "400":
          description: Email already registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email already registered"
  /accounts/authenticate:
    post:
      summary: Authenticate/Login account
      description: API to Login to application
      operationId: authenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "vipuljain044@gmail.com"
                password:
                  type: string
                  example: "pass123"
              required:
                - email
                - password
      responses:
        "200":
          description: Account details, a JWT access token and a refresh token cookie
          headers:
            Set-Cookie:
              description: "`refreshToken`"
              schema:
                type: string
                example: refreshToken=51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550; Path=/; Expires=Tue, 16 Jun 2020 09:14:17 GMT; HttpOnly
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  title:
                    type: string
                    example: "Mr"
                  fullName:
                    type: string
                    example: "Vipul Jain"
                  email:
                    type: string
                    example: "vipuljain044gmail.com"
                  role:
                    type: string
                    example: "Admin"
                  created:
                    type: string
                    example: "2020-05-05T09:12:57.848Z"
                  isVerified:
                    type: boolean
                    example: true
                  jwtToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y"
        "400":
          description: The Email or password is incorrect
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email or password is incorrect"
  
  /movies/:
    get:
      summary: Get Movies List
      description: API to Get List of Movies
      operationId: movies
      responses:
        "200":
          description: Got Movies
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: " Got movies successful"
    post:
      summary: Add new Movie
      description: API to Add new Movie
      operationId: movies
       requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Movie Name"
                genre:
                  type: object
                  example: ['Thriller', 'Action']
                director:
                  type: string
                  example: "Vipul Jain"
                imdb_score:
                  type: number
                  example: 8.0
              required:
                - name
                - genre
                - director
                - imdb_score
      
      responses:
        "200":
          description: Add Movie
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: " Movie saved successfully"
    put:
      summary: Update Movie details
      description: API to Update movie details
      operationId: movies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                _id:
                  type: string
                  example: 'u30919i1ei1e11e1e12e'
                name:
                  type: string
                  example: "Movie Name"
                genre:
                  type: object
                  example: ['Thriller', 'Action']
                director:
                  type: string
                  example: "Vipul Jain"
                imdb_score:
                  type: number
                  example: 8.0
              required:
                - _id
                - name
                - genre
                - director
                - imdb_score 
      responses:
        "200":
          description: Movie details updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: " Got movies successful"
    delete:
      summary: Delete movie
      description: API to delete movie
      operationId: movies
       requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: 'u30919i1ei1e11e1e12e'
              required:
                - id
      responses:
        "200":
          description: Movie deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: " Movie deleted successfully"